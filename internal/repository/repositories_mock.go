// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=repositories_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// Conference mocks base method.
func (m *MockRepositories) Conference() ConferenceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conference")
	ret0, _ := ret[0].(ConferenceRepository)
	return ret0
}

// Conference indicates an expected call of Conference.
func (mr *MockRepositoriesMockRecorder) Conference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conference", reflect.TypeOf((*MockRepositories)(nil).Conference))
}

// User mocks base method.
func (m *MockRepositories) User() UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoriesMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepositories)(nil).User))
}
